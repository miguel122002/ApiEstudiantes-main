@page "/v_estudiante"
@using BlazorApp.Data 
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Formulario de Estudiantes</h1>

@if (getEstudianteError || iestudiante is null)
{
    <p>Unable to get branches from GitHub. Please try again later.</p>
}
else
{
    <form>
        <label for="lbl_carne" class="form-label">Carne</label>
        <input @bind="var_carne" type="text" class="form-control" placeholder="E001" pattern="E[0-9]{3}">
        <label for="lbl_nombres" class="form-label">Nombres</label>
        <input @bind="var_nombres" type="text" class="form-control" placeholder="Ejemplo Nombre 1 Nombre 2">
        <label for="lbl_apellidos" class="form-label">Apellidos</label>
        <input @bind="var_apellidos" type="text" class="form-control" placeholder="Ejemplo Apellido 1 Apellidos 2">
        <label for="lbl_direccion" class="form-label">Direccion</label>
        <input @bind="var_direccion" type="text" class="form-control" placeholder="#casa calle avenida lugar">
        <label for="lbl_telefono" class="form-label">Telefono</label>
        <input @bind="var_telefono" type="text" class="form-control" placeholder="5555555">
        <label for="lbl_correo" class="form-label">Correo Electronico</label>
        <input @bind="var_correo_electronico" type="text" class="form-control" placeholder="example@gmail.com">
        <label for="lbl_sangre" class="form-label">Tipo Sangre</label>
        <input @bind="var_id_tipo_sangre" type="text" class="form-control">
        <label for="lbl_fn" class="form-label">Fecha</label>
        <input @bind="var_fn" type="date" class="form-control"> 
        <br>   
        <button type="button" @onclick="Agregar" class="btn btn-outline-primary">Agregar</button>
        <button type="button" @onclick="Modificar" class="btn btn-outline-success">Modificar</button>
        <button type="button" @onclick="Eliminar" class="btn btn-outline-danger">Eliminar</button>
    </form>
   
    <table class = "table">
        <tbody>
            <tr>
                <th>ID</th>
                <th>Carne</th>
                <th>Nombres</th>
                <th>Apellidos</th>
                <th>Direccion</th>
                <th>Telefono</th>
                <th>Correo Electronico</th>
                <th>ID sangre</th>
                <th>Nacimiento</th>
            </tr>
        </tbody>

        @foreach (var Estudiante in iestudiante)
        {
            <tr>
            <td><button type="button" @onclick="(() => envioparametro(Estudiante.id_estudiante,Estudiante.Carne,Estudiante.Nombres,Estudiante.Apellidos,Estudiante.Direccion,Estudiante.Telefono,Estudiante.correo_electronico,Estudiante.id_tipo_sangre,Estudiante.Nacimiento))" class="btn btn-outline-info"><i class="oi oi-pencil"></i></button></td>
            <td>@Estudiante.Carne</td>
            <td>@Estudiante.Nombres</td>
            <td>@Estudiante.Apellidos</td>
            <td>@Estudiante.Direccion</td>
            <td>@Estudiante.Telefono</td>
            <td>@Estudiante.correo_electronico</td>
            <td>@Estudiante.id_tipo_sangre</td>
            <td>@Estudiante.Nacimiento</td>
            </tr>
        }
    </table>
}

@code {
    private string url = "https://localhost:7084/api/Estudiantes";
    private Int32 var_idestudiantes;
    private string? var_carne,var_nombres,var_apellidos,var_direccion,var_telefono,var_correo_electronico,var_id_tipo_sangre;
    private DateTime? var_fn;

    private IEnumerable<Estudiante>? iestudiante = Array.Empty<Estudiante>();
    private bool getEstudianteError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

//Enviar Parametros
    void envioparametro(Int32 id,string? carne,string? nom,string? ape,string? dire,string? tel,string? correo,string? sangre,DateTime? f){
    var_idestudiantes = id;
    var_carne = carne;
    var_nombres = nom;
    var_apellidos = ape;
    var_direccion = dire;
    var_telefono = tel;
    var_correo_electronico = correo;
    var_id_tipo_sangre = sangre;
    var_fn = f;
    
    }


//Leer
    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            url);
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            iestudiante = await JsonSerializer.DeserializeAsync
                <IEnumerable<Estudiante>>(responseStream);
        }
        else
        {
            getEstudianteError = true;
        }

        shouldRender = true;
    }

    //Crear
    private async Task Agregar()
    {
        var client = ClientFactory.CreateClient();
        var addItem = new Estudiante { id_estudiante=var_idestudiantes,Carne=var_carne,Nombres=var_nombres,Apellidos=var_apellidos,Direccion=var_direccion,Telefono=var_telefono,correo_electronico=var_correo_electronico,id_tipo_sangre=var_id_tipo_sangre,Nacimiento=var_fn };
        await client.PostAsJsonAsync(url, addItem);
        await OnInitializedAsync();
    }
    //Modificar
    private async Task Modificar()
    {
        var client = ClientFactory.CreateClient();
        var addItem = new Estudiante { id_estudiante=var_idestudiantes,Carne=var_carne,Nombres=var_nombres,Apellidos=var_apellidos,Direccion=var_direccion,Telefono=var_telefono,correo_electronico=var_correo_electronico,id_tipo_sangre=var_id_tipo_sangre,Nacimiento=var_fn };
        await client.PutAsJsonAsync($"{url}/{var_idestudiantes}", addItem);
        await OnInitializedAsync();
    }
    //Eliminar
    private async Task Eliminar()
    {
        var client = ClientFactory.CreateClient();  
        await client.DeleteAsync($"{url}/{var_idestudiantes}");
        await OnInitializedAsync();
    }

    
}